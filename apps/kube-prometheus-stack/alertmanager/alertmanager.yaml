global:
  resolve_timeout: 5m

route:
  receiver: "null"
  group_by:
  - alertname
  routes:
  # Any alert with alertname="Watchdog" will match this node, stop here (because continue: false by default), and
  # call "null" (because no children)
  - receiver: "null"
    match:
      alertname: Watchdog
  # Any alert with severity="critical" will match this node, continue matching against its children (nodes B and C)
  # and its next sibling (node D, because continue: true)
  - receiver: "null"                  # node A
    continue: true
    match:
      severity: critical
  # routes:
    # Any alert with issue_type="user-facing" will match this node, continue matching against its next sibling
    # (node C, because continue: true), and call "centralized_alerting" (because no children)
  # - receiver: centralized_alerting  # node B
  #   match:
  #     issue_type: user-facing
  #   continue: true
    # Any alert with other_type="internal", regardless of whether it matched node B (either it matched node B and
    # continue: true allows it to continue to this node or it did not match and so it continues anyway), will match
    # this node, stop matching subsequent siblings (because continue: false by default), and call
    # "operations_alerting" (because no children)
  # - receiver: operations_alerting   # node C
  #   match:
  #     other_type: internal
    # If an alert matches neither node B or C, then the last node it matched was node A, so node A's receiver is
    # called
  # Every alert will match this node (because node A has continue: true and this node has no match criteria), stop
  # here (because continue: false by default), and call "mock" (because no children)
  - receiver: mock                    # node D
  group_wait: 10s
  group_interval: 1m
  repeat_interval: 10m

receivers:
- name: "null"
- name: mock
  webhook_configs:
  - url: {{ .Values.alertmanagerConfig.url }}
    http_config:
      tls_config:
        insecure_skip_verify: true

templates: []
